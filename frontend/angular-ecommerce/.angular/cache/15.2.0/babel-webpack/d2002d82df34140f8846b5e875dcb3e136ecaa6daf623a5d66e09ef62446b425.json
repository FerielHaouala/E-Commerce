{"ast":null,"code":"import { map } from 'rxjs/operators';\nexport class ProductService {\n  // httpClient will be injected automatically by Angular's dependency injection\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = \"http://localhost:8088/api/products\";\n    this.categoryUrl = \"http://localhost:8088/api/product-category\";\n  }\n  getProduct(productId) {\n    // need to build the URL based on the product id\n    const productUrl = `${this.baseUrl}/${productId}`;\n    return this.httpClient.get(productUrl);\n  }\n  getProductList(categoryId) {\n    // need to build the URL based on the category id\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${categoryId}`;\n    return this.getProducts(searchUrl);\n  }\n  getProductListPaginated(page, pageSize, categoryId) {\n    // need to build the URL based on the category id, page and size\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${categoryId}` + `&page=${page}&size=${pageSize}`;\n    return this.httpClient.get(searchUrl);\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n  searchProducts(searchKeyword) {\n    // need to build the URL based on the search keyword\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${searchKeyword}`;\n    return this.getProducts(searchUrl);\n  }\n  searchProductsPaginated(page, pageSize, searchKeyword) {\n    // need to build the URL based on the search keyword, page and size\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${searchKeyword}&page=${page}&size=${pageSize}`;\n    return this.httpClient.get(searchUrl);\n  }\n  getProducts(searchUrl) {\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}