{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.cartItems = [];\n      // Subject is a subclass of Observable. We can use Subject to publish events. The event will be sent to all of the subscribers.\n      this.totalPrice = new Subject();\n      this.totalQuantity = new Subject();\n    }\n    addToCart(theCartItem) {\n      // check if we already have the item in our cart\n      let alreadyExistsInCart = false;\n      let existingCartItem = undefined;\n      if (this.cartItems.length > 0) {\n        // find the item in the cart based on the item id\n        existingCartItem = this.cartItems.find(cartItem => cartItem.id === theCartItem.id);\n        // check if we found it\n        alreadyExistsInCart = existingCartItem != undefined;\n      }\n      if (alreadyExistsInCart) {\n        // increment the quantity\n        existingCartItem.quantity++;\n      } else {\n        // just add the item to the array\n        this.cartItems.push(theCartItem);\n      }\n      // compute cart total price and total quantity\n      this.computeCartTotals();\n    }\n    computeCartTotals() {\n      let totalPriceValue = 0;\n      let totalQuantityValue = 0;\n      for (let currentCartItem of this.cartItems) {\n        totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n        totalQuantityValue += currentCartItem.quantity;\n      }\n      // publish the new values, all subscribers will receive the new data\n      // this will publish two events to all subscribers\n      // one event for totalPrice, one event for totalQuantity\n      this.totalPrice.next(totalPriceValue);\n      this.totalQuantity.next(totalQuantityValue);\n      // log the cart data for debugging purposes\n      this.logCartData(totalPriceValue, totalQuantityValue);\n    }\n    logCartData(totalPriceValue, totalQuantityValue) {\n      console.log(\"Contents of the cart\");\n      for (let cartItem of this.cartItems) {\n        const subTotalPrice = cartItem.quantity * cartItem.unitPrice;\n        console.log(`name: ${cartItem.name}, quantity: ${cartItem.quantity}, unitPrice: ${cartItem.unitPrice}, subTotalPrice: ${subTotalPrice}`);\n      }\n      console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n      console.log(\"----\");\n    }\n    decrementQuantity(cartItem) {\n      cartItem.quantity--;\n      if (cartItem.quantity === 0) {\n        this.remove(cartItem);\n      } else {\n        this.computeCartTotals();\n      }\n    }\n    remove(cartItem) {\n      // get index of the item in the array\n      const itemIndex = this.cartItems.findIndex(tempCartItem => tempCartItem.id === cartItem.id);\n      // if found, remove the item from the array at the given index\n      if (itemIndex > -1) {\n        this.cartItems.splice(itemIndex, 1);\n        this.computeCartTotals();\n      }\n    }\n  }\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}